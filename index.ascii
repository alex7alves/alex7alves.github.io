= Processamento digital de imagem
Autor : Alex Alves  [alex7alves10@hotmail.com].

Os exercícios resolvidos aqui são as respostas para as questões propostas
na disciplina de http://agostinhobritojr.github.io/tutoriais/pdi/[processamento de imagem digital].




== 2 Manipulando píxels em uma imagem

=== Exercício 2.1
* Utilizando o programa exemplos/pixels.cpp como referência, implemente um programa regions.cpp. Esse programa deverá solicitar ao usuário as coordenadas de dois pontos P1P1 e P2P2 localizados dentro dos limites do tamanho da imagem e exibir que lhe for fornecida. Entretanto, a região definida pelo retângulo de vértices opostos definidos pelos pontos P1P1 e P2P2 será exibida com o negativo da imagem na região correspondente. O efeito é ilustrado na Figura Regiões.

A questão pede para implementar uma região para poder se gerar o negativo de no local na imagem. O negativo de uma imagem ( n(x,y)) pode ser compreendido como :

	n(x,y)=255-f(x,y)

O programa <<regions>> mostra a resolução para essa questão.

[[regions,regions.cpp]]

[source,cpp]
.Listagem 1 - Exercício 2.1
....
include::PDI/regioes.cpp[]
....

O programa tem como entrada a imagem 

.Imagem de entrada  - biel.png
image::PDI/biel.png[biel.png]


E resulta na saída, para os pontos (20,30) e (100,200)

.Imagem de saída.
image::PDI/negativo.png[negativo.png]



=== Exercício 2.2

*Utilizando o programa exemplos/pixels.cpp como referência, implemente um programa trocaregioes.cpp. Seu programa deverá trocar os quadrantes em diagonal na imagem. Explore o uso da classe Mat e seus construtores para criar as regiões que serão trocadas. O efeito é ilustrado na Figura Troca de regiões.

Utilizando a mesma imagem( biel.png) como entrada e fazendo o que se é proposto tem-se :
[source,cpp]
.Listagem 2 - Exercício 2.2
....
include::PDI/quadrantes.cpp[]
....

Cuja saída é mostrada a seguir.

.Mudando os quadrantes da imagem.
image::PDI/quadrantes.png[quadrantes.png]

== 3 Preenchendo regiões

=== Exercício 3.1

*Observando-se o programa labeling.cpp como exemplo, é possível verificar que caso existam mais de 255 objetos na cena, o processo de rotulação poderá ficar comprometido. Identifique a situação em que isso ocorre e proponha uma solução para este problema.

O problema de rotular até 255 objetos se deve ao fato de se trabalhar com a escala de cinza onde se pode representar a intensidade até 255 e portanto se limita a esse número. Uma possível solução para aumentar o número de objetos rotulados seria trabalhar com matrizes de cores(RGB) e assim ir rotulando objetos a partir da combinações dessas 3 variações de cores gerando assim um conjunto maior de possibilidades de números de objetos que se pode rotular. 

=== Exercício 3.2

*Aprimore o algoritmo de contagem apresentado para identificar regiões com ou sem buracos internos que existam na cena. Assuma que objetos com mais de um buraco podem existir. Inclua suporte no seu algoritmo para não contar bolhas que tocam as bordas da imagem. Não se pode presumir, a priori, que elas tenham buracos ou não.

De início é necessário fazer um pré-processamento na imagem com a ajuda do algoritmo floodFill especialmente para se retirar os objetos que tocam as bordas. A partir de então pode-se fazer o processo de contagem de objetos e de quantos deles tem buracos. No código aqui implementado optou-se por trabalhar não só para descobrir quantos objetos tem buracos ou não, mas sim quantos objetos tem buracos e, dos objetos que tem buracos, quantos buracos há nele para se obter um nível maior de precisão na contagem. Assim pde-se identificar se tem 3 objetos com 2 buracos, 2 objetos com 4 buracos e assim por diante. Por comodidade limitou-se a contar até 1- buracos internos.

Para testar a implementação é necessário uma imagem diferente da qual foi dada na questão pois a mesma deve ter mais do que um buraco dentro de um objeto. Dessa forma optou-se por usar a seguinte imagem como entrada :

.Imagem das bolhas modifcada.
image::PDI/bolhas2.png[bolhas2.png]

Dessa maneira tem-se o código: 

.Listagem 3 - Exercício 3.2
....
include::PDI/Contar_bolhas.cpp[]
....

Que apresenta como saída :

.Contagem dos objetos com buracos.
image::PDI/saidaContagem.png[saidaContagem.png]

== 4 Manipulação de histogramas

=== Exercício 4.1 
* Utilizando o programa exemplos/histogram.cpp como referência, implemente um programa equalize.cpp. Este deverá, para cada imagem capturada, realizar a equalização do histogram antes de exibir a imagem. Teste sua implementação apontando a câmera para ambientes com iluminações variadas e observando o efeito gerado. Assuma que as imagens processadas serão em tons de cinza.

Assumindo que as imagens serão em tons de cinza e utilizando a própria função do OpenCV para calcular o histograma  tem-se :

.Listagem 4 - Exercício 4.1
....
include::PDI/Equalizar.cpp[]
....

Que produz a seguinte saída :

	INSERIR VIDEO AQUI

=== Exercício 4.2

* Utilizando o programa exemplos/histogram.cpp como referência, implemente um programa motiondetector.cpp. Este deverá continuamente calcular o histograma da imagem (apenas uma componente de cor é suficiente) e compará-lo com o último histograma calculado. Quando a diferença entre estes ultrapassar um limiar pré-estabelecido, ative um alarme. Utilize uma função de comparação que julgar conveniente. 

A listagem 5 apresenta o que se pede.

.Listagem 5 - Exercício 4.2
....
include::PDI/Detectar_movimento.cpp[]
....

Que tem como resultado :

	INSERIR VIDEO 2 AQUI


== 5 Filtragem no domínio espacial I	

=== Exercício 5
* Utilizando o programa exemplos/filtroespacial.cpp como referência, implemente um programa laplgauss.cpp. O programa deverá acrescentar mais uma funcionalidade ao exemplo fornecido, permitindo que seja calculado o laplaciano do gaussiano das imagens capturadas. Compare o resultado desse filtro com a simples aplicação do filtro laplaciano.

Foi escolhido continuar com o modelo que se é utilizado no código dado e apenas inserir uma nova mascara, que é a representação da máscara do laplaciano do gaussiano de tamanho 5x5 encontrado na literatura. 

Na listagem 6 encontra-se a implementação.

.Listagem 6 - Exercício 5
....
include::PDI/filtragem.cpp[]
....

Cujo resultado, para o filtro laplaciano do gaussiano é :

.laplaciano do gaussiano.
image::PDI/lapgauss.png[lapgauss.png]

